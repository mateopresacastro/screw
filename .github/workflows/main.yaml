name: CI/CD

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: eu-central-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/api:latest

      - name: Build and push NextJS image
        uses: docker/build-push-action@v5
        with:
          context: ./nextjs
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/nextjs:latest

      - name: Build and push Proxy image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/proxy:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          # Create required directories
          mkdir -p data/certbot/conf
          mkdir -p data/certbot/www

          # Pull latest images
          docker pull ghcr.io/${{ github.repository }}/api:latest
          docker pull ghcr.io/${{ github.repository }}/nextjs:latest
          docker pull ghcr.io/${{ github.repository }}/proxy:latest

          # Check if certificates exist
          if [ ! -d "/etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}" ]; then
            # Stop any running containers
            docker compose down

            # Start nginx temporarily for certificate acquisition
            docker compose up -d proxy

            # Run certbot
            docker compose run --rm certbot certonly --webroot --webroot-path=/var/www/certbot \
              --email ${{ secrets.CERTBOT_EMAIL }} --agree-tos --no-eff-email \
              --force-renewal -d ${{ secrets.DOMAIN_NAME }}
          fi

          # Replace domain in nginx config
          sed -i "s/your-domain.com/${{ secrets.DOMAIN_NAME }}/g" nginx/nginx.conf

          # Start all services
          docker compose up -d

          # Setup automatic certificate renewal
          (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/docker compose run --rm certbot renew --quiet && /usr/bin/docker compose exec proxy nginx -s reload") | crontab -
          EOF

      - name: Deploy to EC2 using Session Manager
        run: |
          # Copy files to instance
          aws ssm put-parameter --name "/screw/deploy-script" --type "String" --value "$(cat deploy.sh)"
          aws ssm put-parameter --name "/screw/docker-compose" --type "String" --value "$(cat docker-compose.yaml)"
          aws ssm put-parameter --name "/screw/nginx-conf" --type "String" --value "$(cat nginx/nginx.conf)"

          # Run deployment command
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instance-ids,Values=${{ secrets.INSTANCE_ID }}" \
            --parameters "commands=[
              'cd /home/ec2-user/app',
              'aws ssm get-parameter --name \"/screw/deploy-script\" --query \"Parameter.Value\" --output text > deploy.sh',
              'aws ssm get-parameter --name \"/screw/docker-compose\" --query \"Parameter.Value\" --output text > docker-compose.yaml',
              'aws ssm get-parameter --name \"/screw/nginx-conf\" --query \"Parameter.Value\" --output text > nginx/nginx.conf',
              'chmod +x deploy.sh',
              './deploy.sh'
            ]"
