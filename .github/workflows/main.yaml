name: CI/CD
on:
  push:
    branches: [main]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: eu-central-1

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
      nextjs: ${{ steps.filter.outputs.nextjs }}
      proxy: ${{ steps.filter.outputs.proxy }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            nextjs:
              - 'nextjs/**'
            proxy:
              - 'nginx/**'

  build-api:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: ./api
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-nextjs:
    needs: changes
    if: ${{ needs.changes.outputs.nextjs == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: ./nextjs
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/nextjs:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-proxy:
    needs: changes
    if: ${{ needs.changes.outputs.proxy == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: ./nginx
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/proxy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [changes, build-api, build-nextjs, build-proxy]
    if: |
      always() &&
      (needs.changes.outputs.api == 'false' || needs.build-api.result == 'success') &&
      (needs.changes.outputs.nextjs == 'false' || needs.build-nextjs.result == 'success') &&
      (needs.changes.outputs.proxy == 'false' || needs.build-proxy.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to GitHub Container Registry on EC2
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters commands="sudo -u ec2-user docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.PAT }}"
      - name: Deploy to EC2
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters commands="sudo su - ec2-user && cd /home/ec2-user/app && make prod && docker image prune --force"
